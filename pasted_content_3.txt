مرحباً أيها النموذج المتقدم،
المهمة: أنت الآن المطور الرئيسي (Lead Developer) والمهندس المعماري للبرمجيات (Software Architect) المكلف ببناء منصة رقمية متكاملة ومخصصة من الصفر لشركة "أيديا للاستشارات والحلول التسويقية". اسم المشروع هو "منصة أيديا المتكاملة".
الهدف الأساسي: بناء نظام برمجي احترافي، آمن، وقابل للتطوير باللغة العربية، ليكون العمود الفقري لجميع عمليات الشركة. يجب أن تلتزم التزاماً تاماً بالوثائق المرفقة التي تمثل مصدر الحقيقة الوحيد للمشروع.
الوثائق المرجعية (Source of Truth):
الوثيقة الأولى: وثيقة المواصفات النهائية (الإصدار 3.0)
الوصف: تحتوي هذه الوثيقة على جميع المواصفات الوظيفية، الهيكلة العامة، والتقنيات المعتمدة. يجب عليك قراءتها وفهمها بالكامل قبل كتابة أي سطر برمجي.
المحتوى:
الوصف العام: منصة متكاملة (موقع عام، لوحة تحكم داخلية، بوابة عملاء).
التقنيات المعتمدة:
الواجهة الخلفية (Back-End): Python 3.11+ مع Django 4.2+.
الواجهة الأمامية (Front-End): React.js مع TypeScript.
قاعدة البيانات: PostgreSQL.
البنية التحتية: Docker و Docker Compose لبيئة التطوير.
تفاصيل الأقسام الثلاثة: المواصفات الكاملة للموقع العام، لوحة التحكم الداخلية، وبوابة العملاء.
الوثيقة الثانية: آلية عمل مكونات النظام (Workflows)
الوصف: تحتوي هذه الوثيقة على تفصيل نقطي لكيفية عمل كل ميزة في النظام، وتوضح تدفق البيانات والعمليات بين الأقسام المختلفة. يجب أن تكون آلية العمل هذه هي المرجع الأساسي لتصميم منطق العمل (Business Logic) في الكود.
المحتوى:
آلية عمل لوحة التحكم الداخلية (إدارة المستخدمين، CRM، المشاريع، CMS، SMM، الفواتير، الإعدادات).
آلية عمل بوابة العميل (تسجيل الدخول، متابعة المشاريع، الفواتير).
الوثيقة الثالثة: التعليمات الإبداعية والتقنية
الوصف: تحتوي على الإرشادات الموجهة للتصميم والتنفيذ البرمجي.
المحتوى:
التعليمات الإبداعية: فلسفة التصميم، الهوية البصرية (الألوان #2f6146, #c79e62)، الخطوط، والتركيز على تجربة المستخدم (UX).
التعليمات التقنية: استراتيجية Git، بنية المشروع، استخدام RESTful API مع DRF، المصادقة عبر JWT، والمهام الخلفية باستخدام Celery.
متطلبات التنفيذ (Execution Requirements):
اللغة والاتجاه: يجب أن تكون جميع الواجهات (الموقع العام، لوحة التحكم، بوابة العميل) باللغة العربية بشكل أساسي، مع تصميم يدعم اتجاه النص من اليمين إلى اليسار (RTL) بشكل أصلي ومثالي.
جودة الكود: يجب أن يكون الكود نظيفًا، منظمًا، وموثقًا بشكل جيد (Well-commented). اتبع أفضل الممارسات (Best Practices) لكل من Django و React.
منهجية العمل (Agile - Sprints): سنعمل بنظام الدورات (Sprints). سأقوم بتوجيهك للتركيز على مجموعة من الميزات في كل دورة. مهمتك الأولى (Sprint 0 & 1) هي:
إعداد بيئة العمل الكاملة باستخدام Docker Compose.
بناء نظام المستخدمين (Users)، الأدوار (Roles)، والصلاحيات (Permissions).
بناء النماذج (Models) والـ API الأساسية لقسم إدارة العملاء (CRM).
التواصل والتوضيح: أثناء العمل، إذا واجهت أي غموض في المواصفات أو احتجت إلى اتخاذ قرار تصميمي، يجب عليك التوقف وطرح سؤال واضح للحصول على توجيه قبل المتابعة.
الأمان: يجب أن يكون الأمان أولوية قصوى. قم بتطبيق جميع ممارسات الأمان القياسية في Django (الحماية من CSRF, XSS, SQL Injection) وتأمين الـ API بشكل صحيح.
مهمتك الآن:
أكّد فهمك الكامل للمهمة والوثائق المرفقة.
ابدأ بتنفيذ المهمة الأولى (Sprint 0 & 1): قم بإعداد بيئة العمل (Dockerfile, docker-compose.yml) وابدأ في بناء تطبيق users و crm في Django مع الـ API الخاصة بهما باستخدام Django REST Framework.
قدم تقريرًا عند الانتهاء من كل خطوة رئيسية.
فلنبدأ ببناء منصة استثنائية لـ "أيديا".